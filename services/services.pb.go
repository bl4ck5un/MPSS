// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Share struct {
	Epoch                int32    `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	From                 int64    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Share                []byte   `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Share) Reset()         { *m = Share{} }
func (m *Share) String() string { return proto.CompactTextString(m) }
func (*Share) ProtoMessage()    {}
func (*Share) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{0}
}

func (m *Share) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Share.Unmarshal(m, b)
}
func (m *Share) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Share.Marshal(b, m, deterministic)
}
func (m *Share) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Share.Merge(m, src)
}
func (m *Share) XXX_Size() int {
	return xxx_messageInfo_Share.Size(m)
}
func (m *Share) XXX_DiscardUnknown() {
	xxx_messageInfo_Share.DiscardUnknown(m)
}

var xxx_messageInfo_Share proto.InternalMessageInfo

func (m *Share) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Share) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Share) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

type BlindedShare struct {
	Epoch                int32    `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	From                 int64    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Share                []byte   `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlindedShare) Reset()         { *m = BlindedShare{} }
func (m *BlindedShare) String() string { return proto.CompactTextString(m) }
func (*BlindedShare) ProtoMessage()    {}
func (*BlindedShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{1}
}

func (m *BlindedShare) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlindedShare.Unmarshal(m, b)
}
func (m *BlindedShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlindedShare.Marshal(b, m, deterministic)
}
func (m *BlindedShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlindedShare.Merge(m, src)
}
func (m *BlindedShare) XXX_Size() int {
	return xxx_messageInfo_BlindedShare.Size(m)
}
func (m *BlindedShare) XXX_DiscardUnknown() {
	xxx_messageInfo_BlindedShare.DiscardUnknown(m)
}

var xxx_messageInfo_BlindedShare proto.InternalMessageInfo

func (m *BlindedShare) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *BlindedShare) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *BlindedShare) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

type ProposalHash struct {
	Epoch                int32    `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Proposer             int64    `protobuf:"varint,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Hash                 []byte   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposalHash) Reset()         { *m = ProposalHash{} }
func (m *ProposalHash) String() string { return proto.CompactTextString(m) }
func (*ProposalHash) ProtoMessage()    {}
func (*ProposalHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{2}
}

func (m *ProposalHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposalHash.Unmarshal(m, b)
}
func (m *ProposalHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposalHash.Marshal(b, m, deterministic)
}
func (m *ProposalHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalHash.Merge(m, src)
}
func (m *ProposalHash) XXX_Size() int {
	return xxx_messageInfo_ProposalHash.Size(m)
}
func (m *ProposalHash) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalHash.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalHash proto.InternalMessageInfo

func (m *ProposalHash) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ProposalHash) GetProposer() int64 {
	if m != nil {
		return m.Proposer
	}
	return 0
}

func (m *ProposalHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ProposalHashList struct {
	Epoch                int32           `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	List                 []*ProposalHash `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ProposalHashList) Reset()         { *m = ProposalHashList{} }
func (m *ProposalHashList) String() string { return proto.CompactTextString(m) }
func (*ProposalHashList) ProtoMessage()    {}
func (*ProposalHashList) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{3}
}

func (m *ProposalHashList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProposalHashList.Unmarshal(m, b)
}
func (m *ProposalHashList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProposalHashList.Marshal(b, m, deterministic)
}
func (m *ProposalHashList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalHashList.Merge(m, src)
}
func (m *ProposalHashList) XXX_Size() int {
	return xxx_messageInfo_ProposalHashList.Size(m)
}
func (m *ProposalHashList) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalHashList.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalHashList proto.InternalMessageInfo

func (m *ProposalHashList) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ProposalHashList) GetList() []*ProposalHash {
	if m != nil {
		return m.List
	}
	return nil
}

type Proposal struct {
	Epoch                int32    `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	From                 int64    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	Gob                  []byte   `protobuf:"bytes,3,opt,name=gob,proto3" json:"gob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{4}
}

func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Proposal.Unmarshal(m, b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return xxx_messageInfo_Proposal.Size(m)
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

func (m *Proposal) GetEpoch() int32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Proposal) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Proposal) GetGob() []byte {
	if m != nil {
		return m.Gob
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e16ccb8c5307b32, []int{5}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Share)(nil), "services.Share")
	proto.RegisterType((*BlindedShare)(nil), "services.BlindedShare")
	proto.RegisterType((*ProposalHash)(nil), "services.ProposalHash")
	proto.RegisterType((*ProposalHashList)(nil), "services.ProposalHashList")
	proto.RegisterType((*Proposal)(nil), "services.Proposal")
	proto.RegisterType((*Empty)(nil), "services.Empty")
}

func init() { proto.RegisterFile("services.proto", fileDescriptor_8e16ccb8c5307b32) }

var fileDescriptor_8e16ccb8c5307b32 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x5d, 0x6b, 0xe2, 0x40,
	0x14, 0xdd, 0x98, 0x64, 0x57, 0xee, 0x66, 0x5d, 0x19, 0x44, 0x82, 0x4f, 0x21, 0x4f, 0xc1, 0x07,
	0x59, 0x94, 0x7d, 0x2c, 0x45, 0x8b, 0x6d, 0xa1, 0x45, 0x4a, 0xe2, 0x1f, 0xc8, 0xc7, 0xd4, 0x0c,
	0x9d, 0x64, 0xc2, 0xcc, 0x28, 0xf4, 0x9f, 0xf5, 0x8f, 0xf5, 0xbd, 0x64, 0x62, 0x6c, 0x6c, 0x94,
	0x52, 0xe8, 0xdb, 0xbd, 0x27, 0xe7, 0x9c, 0x99, 0x7b, 0x6e, 0x06, 0x7a, 0x02, 0xf3, 0x1d, 0x89,
	0xb1, 0x98, 0x14, 0x9c, 0x49, 0x86, 0xba, 0x75, 0xef, 0xde, 0x80, 0x19, 0xa4, 0x21, 0xc7, 0x68,
	0x00, 0x26, 0x2e, 0x58, 0x9c, 0xda, 0x9a, 0xa3, 0x79, 0xa6, 0x5f, 0x35, 0x08, 0x81, 0xf1, 0xc8,
	0x59, 0x66, 0x77, 0x1c, 0xcd, 0xd3, 0x7d, 0x55, 0x97, 0x4c, 0x51, 0x4a, 0x6c, 0xdd, 0xd1, 0x3c,
	0xcb, 0xaf, 0x1a, 0x77, 0x05, 0xd6, 0x82, 0x92, 0x3c, 0xc1, 0xc9, 0xf7, 0xf8, 0xad, 0xc1, 0x7a,
	0xe0, 0xac, 0x60, 0x22, 0xa4, 0xb7, 0xa1, 0x48, 0xcf, 0xf8, 0x8d, 0xa0, 0x5b, 0x28, 0x16, 0xe6,
	0x7b, 0xcf, 0x43, 0x5f, 0x9e, 0x95, 0x86, 0x22, 0xdd, 0xdb, 0xaa, 0xda, 0x5d, 0x43, 0xbf, 0xe9,
	0x7a, 0x4f, 0x84, 0x3c, 0xe3, 0x3c, 0x06, 0x83, 0x12, 0x21, 0xed, 0x8e, 0xa3, 0x7b, 0xbf, 0xa7,
	0xc3, 0xc9, 0x21, 0xc1, 0xa6, 0xde, 0x57, 0x1c, 0xf7, 0x1a, 0xba, 0x35, 0xfa, 0x85, 0xb9, 0xfb,
	0xa0, 0x6f, 0x58, 0xb4, 0xbf, 0x5e, 0x59, 0xba, 0xbf, 0xc0, 0x5c, 0x66, 0x85, 0x7c, 0x9e, 0xbe,
	0x68, 0x30, 0x58, 0x6c, 0x29, 0xc5, 0x92, 0xe4, 0x0b, 0x16, 0xf2, 0x24, 0xa8, 0x4e, 0x47, 0x97,
	0x80, 0x82, 0x6d, 0x94, 0x11, 0x79, 0x94, 0xcd, 0x99, 0xdb, 0x8d, 0xfe, 0xbe, 0xe3, 0xca, 0xd7,
	0xfd, 0x81, 0x66, 0xf0, 0x67, 0x2e, 0x04, 0xce, 0x22, 0x8a, 0xab, 0x3d, 0x35, 0x38, 0x0a, 0x38,
	0x25, 0x1a, 0x83, 0x71, 0x47, 0x28, 0x45, 0x1f, 0x3f, 0x9d, 0xe0, 0x4e, 0x5f, 0x35, 0x30, 0x56,
	0x2c, 0xc1, 0xe8, 0x1f, 0x58, 0xf3, 0x64, 0x17, 0xe6, 0x31, 0x5e, 0xaa, 0x08, 0x3e, 0x15, 0xa3,
	0x25, 0x0c, 0x03, 0x19, 0x72, 0x79, 0x95, 0xe2, 0xf8, 0x89, 0xe4, 0x9b, 0x7a, 0x16, 0x81, 0x46,
	0xa7, 0x07, 0x2c, 0xd7, 0xd7, 0xb6, 0xf9, 0x0f, 0xbd, 0xe3, 0x8c, 0x10, 0x6a, 0xcb, 0xdb, 0xb2,
	0x8b, 0x3a, 0xda, 0xa3, 0xdf, 0xb8, 0x11, 0x6d, 0x13, 0x6f, 0xc9, 0xa3, 0x9f, 0xea, 0x65, 0xcd,
	0xde, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xed, 0x19, 0x3a, 0x6b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BulletinBoardServiceClient is the client API for BulletinBoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BulletinBoardServiceClient interface {
	SubmitProposalHash(ctx context.Context, in *ProposalHash, opts ...grpc.CallOption) (*Empty, error)
	AssembleShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Empty, error)
	Kill(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type bulletinBoardServiceClient struct {
	cc *grpc.ClientConn
}

func NewBulletinBoardServiceClient(cc *grpc.ClientConn) BulletinBoardServiceClient {
	return &bulletinBoardServiceClient{cc}
}

func (c *bulletinBoardServiceClient) SubmitProposalHash(ctx context.Context, in *ProposalHash, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.BulletinBoardService/SubmitProposalHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) AssembleShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.BulletinBoardService/AssembleShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bulletinBoardServiceClient) Kill(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.BulletinBoardService/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BulletinBoardServiceServer is the server API for BulletinBoardService service.
type BulletinBoardServiceServer interface {
	SubmitProposalHash(context.Context, *ProposalHash) (*Empty, error)
	AssembleShare(context.Context, *Share) (*Empty, error)
	Kill(context.Context, *Empty) (*Empty, error)
}

func RegisterBulletinBoardServiceServer(s *grpc.Server, srv BulletinBoardServiceServer) {
	s.RegisterService(&_BulletinBoardService_serviceDesc, srv)
}

func _BulletinBoardService_SubmitProposalHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).SubmitProposalHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.BulletinBoardService/SubmitProposalHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).SubmitProposalHash(ctx, req.(*ProposalHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_AssembleShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).AssembleShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.BulletinBoardService/AssembleShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).AssembleShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

func _BulletinBoardService_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BulletinBoardServiceServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.BulletinBoardService/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BulletinBoardServiceServer).Kill(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BulletinBoardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.BulletinBoardService",
	HandlerType: (*BulletinBoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProposalHash",
			Handler:    _BulletinBoardService_SubmitProposalHash_Handler,
		},
		{
			MethodName: "AssembleShare",
			Handler:    _BulletinBoardService_AssembleShare_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _BulletinBoardService_Kill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	AdvanceEpoch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartCheckingProposals(ctx context.Context, in *ProposalHashList, opts ...grpc.CallOption) (*Empty, error)
	SubmitProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error)
	SubmitBlindedShare(ctx context.Context, in *BlindedShare, opts ...grpc.CallOption) (*Empty, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) AdvanceEpoch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.Node/AdvanceEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) StartCheckingProposals(ctx context.Context, in *ProposalHashList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.Node/StartCheckingProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitProposal(ctx context.Context, in *Proposal, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.Node/SubmitProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SubmitBlindedShare(ctx context.Context, in *BlindedShare, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/services.Node/SubmitBlindedShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	AdvanceEpoch(context.Context, *Empty) (*Empty, error)
	StartCheckingProposals(context.Context, *ProposalHashList) (*Empty, error)
	SubmitProposal(context.Context, *Proposal) (*Empty, error)
	SubmitBlindedShare(context.Context, *BlindedShare) (*Empty, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_AdvanceEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).AdvanceEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Node/AdvanceEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).AdvanceEpoch(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_StartCheckingProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalHashList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).StartCheckingProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Node/StartCheckingProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).StartCheckingProposals(ctx, req.(*ProposalHashList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Proposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Node/SubmitProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitProposal(ctx, req.(*Proposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_SubmitBlindedShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindedShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).SubmitBlindedShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Node/SubmitBlindedShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).SubmitBlindedShare(ctx, req.(*BlindedShare))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdvanceEpoch",
			Handler:    _Node_AdvanceEpoch_Handler,
		},
		{
			MethodName: "StartCheckingProposals",
			Handler:    _Node_StartCheckingProposals_Handler,
		},
		{
			MethodName: "SubmitProposal",
			Handler:    _Node_SubmitProposal_Handler,
		},
		{
			MethodName: "SubmitBlindedShare",
			Handler:    _Node_SubmitBlindedShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
